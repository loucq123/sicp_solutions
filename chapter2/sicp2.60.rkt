#lang racket
(define (element-of-set? x set)
  (cond ((null? set) true)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (equal? list1 list2)
  (cond ((and (null? list1) (null? list2)) true)
        ((and (not (pair? (car list1))) (not (pair? (car list2))) (eq? (car list1) (car list2)))
         (equal? (cdr list1) (cdr list2)))
        ((and (pair? (car list1)) (pair? (car list2)))
         (equal? (car list1) (car list2))
         (equal? (cdr list1) (cdr list2)))
        (else
         false)))
(define (adjoin-set x set)
  (cons x set))
(define (union-set set1 set2)
  (append set1 set2))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2))'())
        ((not (element-of-set? (car set1) set2))
         (adjoin (intersection-set (cdr set1) set2)))
        (else
         (intersection-set (cdr set1) set2))))