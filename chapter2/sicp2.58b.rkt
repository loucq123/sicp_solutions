#lang racket
(define (derive exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (derive (addend exp) var)
                   (derive (augend exp) var)))
        ((product? exp)
         (let ((sum (make-sum
                     (make-product (multiplier exp)
                                   (derive (multiplicand exp) var))
                     (make-product (derive (multiplier exp) var)
                                   (multiplicand exp)))))
           (cond ((or (not (pair? (augend exp)))(null? (cdr (augend exp))))
                  sum)
                 ((sum? (augend exp))
                  (make-sum
                   sum
                   (derive (augend (augend exp)) var)))
                 ((product? (augend exp))
                  (derive (cons sum (cddr (augend exp))) var)))))      
        (else
         (error "unknow expression type -- Derive" exp))))
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? exp) (and (pair? exp) (eq? (cadr exp) '+))) ;pay attention to pair?
(define (addend s) (car s))
(define (augend s)
  (if (null? (cdddr s))
      (caddr s)
      (cddr s)))
;(define (make-sum a1 a2) (list '+ a1 a2))       this is not a good way, 
;(define (make-product a1 a2) (list '* a1 a2))   because it's not simplified
(define (product? exp) (and (pair? exp) (eq? (cadr exp) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))
  ;(if (null? (cdddr p))
      ;(caddr p)
      ;(cddr p)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2) (* m1 m2)))
        (else (list m1 '* m2))))
;test
(derive '(x + 3 * (x + y + 2)) 'x)
(derive '(x + 3 * x + x) 'x)
(derive '(x + 3 * (x + y + 2)) 'x)

