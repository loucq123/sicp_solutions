#lang racket
;(define (square x) (* x x))
;(define (sqrt-iter guess x)
;  (if (good-enough? guess x)
;      guess
;     (sqrt-iter(improve guess x) x)))
;(define (good-enough? guess x)
 ; (< (abs(/ (- (improve guess x) guess) guess)) 0.0001))
;(define (improve guess x)
;  (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
;(define (sqrt x)
;  (sqrt-iter 1.0 x))
;更好的封装方式
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs(/ (- (improve guess) guess) guess)) 0.0001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))