#lang racket
(define (make-account balance password)
  (define (call-the-cops)
    (error "You have input wrong password too mang times"))
  (define wrong-password-times (accumulator 0))
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount)) balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (change-password new-password)
    (set! password new-password))   
  (define (dispatch pw mes)
    (cond ((not (eq? pw password))
          (lambda (amount)
            (begin (wrong-password-times 1)
             (if (>= (wrong-password-times 0) 7)
                 (call-the-cops)
                 "Incorrect password"))))
          ((and (eq? pw password) (eq? mes 'withdraw))
           (set! wrong-password-times (accumulator 0))
           withdraw)
          ((and (eq? pw password) (eq? mes 'deposit))
           (set! wrong-password-times (accumulator 0))
           deposit)
          ((and (eq? pw password) (eq? mes 'confirm-password))
           true)
          ((and (not (eq? pw password)) (eq? mes 'confirm-password))
           false)
          ((and (eq? pw password) (eq? mes 'change-password))
           change-password)
          (else "Unknown request -- MAKE-ACCOUNT" mes)))
  dispatch)
(define (make-joint acc password another-account-password)
    (define new acc)
    (if (acc password 'confirm-password)
        (begin ((new password 'change-password) another-account-password)
         new)
        "Incorrect password"))      
(define (accumulator number)
  (lambda (add-number)
    (begin (set! number (+ number add-number))
           number)))
(define lcq (make-account 100 'l123))
(define csr 
  (make-joint lcq 'l123 'c123))
