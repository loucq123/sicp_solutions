#lang racket
(define (make-monitored proc)
  (let ((initial 0))
    (set! initial (+ initial 1))
    (define (fm message)
      (cond ((eq? message 'how-many-calls) initial)
            ((eq? message 'reset-count) (set! initial 0))
            (else (begin (set! initial (+ initial 1)) (proc message)))))
    fm))
(define (square x) (* x x))
(define s (make-monitored square))
(define (make-accumulator number)
  (lambda (add-number)
    (begin (set! number (+ number add-number))
           number)))
(define (make-monitored2 proc)
  (define fm (make-accumulator 0))
  (define (dispatch message)
    (cond ((eq? message 'how-many-calls?) (fm 0))
          ((eq? message 'reset-count) (set! fm (make-accumulator 0)))
          (else (begin (fm 1) (proc message)))))
  dispatch)
(define mm2 (make-monitored2 square))
                 